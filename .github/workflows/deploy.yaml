name: SpringScale Deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: "self-hosted"
    env:
      IMAGE_NAME: springboot-docker
      IMAGE_TAG: ${{ github.run_number }}


    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Setup Java JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'oracle'
          java-version: '17'
          cache: maven
          check-latest: true

      - name: Install Maven
        run: sudo apt-get update && sudo apt install -y maven

      - name: Clean Install with Maven
        run: mvn clean install

      - name: Package with Maven
        run: mvn clean package -Dmaven.test.skip

      - name: Login to Docker Hub
        run: |
          docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}} ${{secrets.DOCKER_REGISTRY}}

      - name: Build Docker Image
        run: |
            docker build . --file src/Dockerfile --tag ${{secrets.DOCKER_USERNAME}}/$IMAGE_NAME:${{secrets.DOCKER_IMAGE_TAG}} --no-cache

      - name: Push Image to Docker Hub
        run: |
          docker push ${{secrets.DOCKER_USERNAME }}/$IMAGE_NAME:${{secrets.DOCKER_IMAGE_TAG}}

      - name: Clean the maven repo
        run: mvn clean

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
  
      - name: Check and Deploy Portainer Stack
        run: |
          ## Check whether stack already exists in Portainer or not

          STACK_EXISTS=$(curl -k -s -X GET "${{secrets.PORTAINER_URL}}/api/stacks" -H "X-API-Key: ${{secrets.PORTAINER_API_TOKEN}}" | jq '.[] | select(.Name == "${{secrets.PORTAINER_STACK_NAME}}")')

          ## If the stack does not exists then create the stack otherwise just show the message

          if [ -z "$STACK_EXISTS" ]; then

            ## Create stack

            STACK_CREATED=$(curl -k -X POST "${{secrets.PORTAINER_URL}}/api/stacks/create/standalone/repository?endpointId=${{secrets.PORTAINER_ENDPOINT_ID}}" -H "X-API-Key: ${{secrets.PORTAINER_API_TOKEN}}" -H "Content-Type: application/json" -d '{
              "additionalFiles": [],
              "autoUpdate": {
                "interval": "5m"
              },
              "composeFile": "docker-compose.yml",
              "env": [],
              "fromAppTemplate": false,
              "name": "${{secrets.PORTAINER_STACK_NAME}}",
              "repositoryAuthentication": true,
              "repositoryUsername": "${{ github.actor }}",
              "repositoryPassword": "${{secrets.GITREPO_PASSWORD}}",
              "repositoryReferenceName": "${{github.ref}}",
              "repositoryURL": "${{github.server_url}}/${{github.repository}}",
              "tlsskipVerify": false
            }')

            ## Check whether the new stack is created or not. If fails then show the reason otherwise exit successfully

            if [[ "$STACK_CREATED" == *"fail"* ]]; then
              echo "Stack not created"
              echo "Reason: $STACK_CREATED"
              exit 1
            else
              echo "Stack created successfully"
              exit 0
            fi
          else
            echo "Stacks Already Exists"
          fi